type configuration = int array;;

(** Renvoie le coefficient binomial k parmi n**)
let binom n k =
  let num = ref 1 in
  let denum = ref 1 in
  for i = 1 to k do
    num := !num * (n - i + 1);
    denum := !denum * i;
  done;
  !num / !denum
;;

(** Renvoie le vecteur c definit au debut de la partie 2**)
let vecteur_c (n_config : configuration) =
  let c = Array.make 11 0 in
  c.(0) <- n_config.(0);
  for i = 1 to 10 do
    c.(i) <- n_config.(i) + 1 + c.(i-1);
  done;
  c
;;

(** Prend en entree un vecteur c et renvoie enc(c) **)
let enc c : int =
  let res = ref 0 in
  for i = 1 to 11 do
    res := !res + (binom c.(i-1) i);
  done;
  !res
;;

(** Renvoie le plus grand entier n tel que k parmis n soit inferieur a m **)
let plus_grand_coeff k m =
  if m < 0 then 0 else (
    let n = ref k in
    while binom !n k <= m do
      incr n;
    done;
    !n - 1
  )
;;

(** Renvoie le vecteur c decode **)
let dec g =
  let c = Array.make 11 0 in
  let g = ref g in
  for i = 10 downto 0 do
    let c_i = plus_grand_coeff (i+1) !g in
(*    Printf.printf "c_%d = %d et g%d =%d\n" i c_i (i+1) !g; *)
    g := !g - (binom c_i (i+1));
    c.(i) <- c_i;
  done;
  c
;;

let extractNombreGodel epsilon =
  let nb_pierre = epsilon mod 49 in
  let enc_c = epsilon / 49 in
  (nb_pierre, enc_c )
;;

(** Cette fonction renvoie la configuration associee a un certain nombre de godel g**)
let godelVersConfig g =
  let nb_pierre, enc_c = extractNombreGodel g in
  let c = dec enc_c in
  let nb_pierre_placee = ref c.(0) in
  let a = Array.make 12 0 in
  a.(0) <- c.(0);
  for i = 1 to 10 do
    a.(i) <- c.(i) - 1 - c.(i-1);
    nb_pierre_placee := !nb_pierre_placee + a.(i);
  done;
  Printf.printf "All good\n";
  a.(11) <- nb_pierre - !nb_pierre_placee;
  a
;;

(** Affiche une configuration**)
let printConfig (a : configuration) =
  for i = 11 downto 6 do
    Printf.printf "%d " a.(i);
  done;
  Printf.printf "\n";
  for i = 0 to 5 do
    Printf.printf "%d " a.(i);
  done;
 Printf.printf "\n\n";
;;
